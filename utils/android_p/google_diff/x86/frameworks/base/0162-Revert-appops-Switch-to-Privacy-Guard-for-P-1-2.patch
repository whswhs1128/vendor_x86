From 35313bff195e2c71214cfb58760d1e8902348668 Mon Sep 17 00:00:00 2001
From: Jon West <electrikjesus@gmail.com>
Date: Sat, 4 May 2019 14:55:47 -0400
Subject: [PATCH 2/5] Revert "appops: Switch to Privacy Guard for P (1/2)"

This reverts commit 0e242d7fb11784185e8fc5c7fd0d8b4160f7fb2a.

Change-Id: I82187c4fc27b43825e23734bd8ab5838cbfcbeb7
---
 config/hiddenapi-private-dex.txt              |   6 +-
 core/java/android/app/AppOpsManager.java      | 321 +------------
 core/java/android/provider/Settings.java      |  29 --
 .../android/internal/app/IAppOpsService.aidl  |   4 -
 .../drawable/stat_notify_privacy_guard.xml    |  11 -
 .../layout/permission_confirmation_dialog.xml |  67 ---
 core/res/res/values/bliss_strings.xml         |  93 ----
 core/res/res/values/bliss_symbols.xml         |  15 -
 core/res/res/values/custom_arrays.xml         | 186 --------
 .../com/android/server/AppOpsService.java     | 449 ++----------------
 .../android/server/BasePermissionDialog.java  |  84 ----
 .../server/BluetoothManagerService.java       |  10 -
 .../com/android/server/PermissionDialog.java  | 145 ------
 .../server/PermissionDialogReqQueue.java      |  88 ----
 .../server/am/ActivityManagerService.java     |  64 ---
 .../com/android/server/am/ActivityRecord.java |  27 --
 .../server/am/ActivityStackSupervisor.java    |   5 -
 .../server/pm/PackageManagerService.java      |  16 -
 .../android/telephony/TelephonyManager.java   |  12 -
 19 files changed, 72 insertions(+), 1560 deletions(-)
 delete mode 100644 core/res/res/drawable/stat_notify_privacy_guard.xml
 delete mode 100644 core/res/res/layout/permission_confirmation_dialog.xml
 delete mode 100644 core/res/res/values/custom_arrays.xml
 delete mode 100644 services/core/java/com/android/server/BasePermissionDialog.java
 delete mode 100644 services/core/java/com/android/server/PermissionDialog.java
 delete mode 100644 services/core/java/com/android/server/PermissionDialogReqQueue.java

diff --git a/config/hiddenapi-private-dex.txt b/config/hiddenapi-private-dex.txt
index bbc5b00b5469..c3cf29a7a7b2 100644
--- a/config/hiddenapi-private-dex.txt
+++ b/config/hiddenapi-private-dex.txt
@@ -4421,9 +4421,9 @@ Landroid/app/AppOpsManager$OnOpChangedInternalListener;
 Landroid/app/AppOpsManager$OnOpChangedInternalListener;-><init>()V
 Landroid/app/AppOpsManager$OnOpChangedInternalListener;->onOpChanged(ILjava/lang/String;)V
 Landroid/app/AppOpsManager$OpEntry;
-Landroid/app/AppOpsManager$OpEntry;-><init>(IIJJIILjava/lang/String;II)V
-Landroid/app/AppOpsManager$OpEntry;-><init>(II[J[JIILjava/lang/String;II)V
-Landroid/app/AppOpsManager$OpEntry;-><init>(II[J[JIZILjava/lang/String;II)V
+Landroid/app/AppOpsManager$OpEntry;-><init>(IIJJIILjava/lang/String;)V
+Landroid/app/AppOpsManager$OpEntry;-><init>(II[J[JIILjava/lang/String;)V
+Landroid/app/AppOpsManager$OpEntry;-><init>(II[J[JIZILjava/lang/String;)V
 Landroid/app/AppOpsManager$OpEntry;-><init>(Landroid/os/Parcel;)V
 Landroid/app/AppOpsManager$OpEntry;->CREATOR:Landroid/os/Parcelable$Creator;
 Landroid/app/AppOpsManager$OpEntry;->getDuration()I
diff --git a/core/java/android/app/AppOpsManager.java b/core/java/android/app/AppOpsManager.java
index f9361a9bcac9..00681512b90a 100644
--- a/core/java/android/app/AppOpsManager.java
+++ b/core/java/android/app/AppOpsManager.java
@@ -1,6 +1,5 @@
 /*
  * Copyright (C) 2012 The Android Open Source Project
- * Copyright (c) 2013-2014, The Linux Foundation. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -119,12 +118,6 @@ public class AppOpsManager {
      */
     public static final int MODE_FOREGROUND = 4;
 
-    /**
-     * @hide Result from {@link #checkOp}, {@link #noteOp}, {@link #startOp}:
-     * AppOps Service should show a dialog box on screen to get user permission.
-     */
-    public static final int MODE_ASK = 5;
-
     /**
      * Flag for {@link #startWatchingMode(String, String, int, OnOpChangedListener)}:
      * Also get reports if the foreground state of an op's uid changes.  This only works
@@ -142,7 +135,6 @@ public class AppOpsManager {
             "deny",         // MODE_ERRORED
             "default",      // MODE_DEFAULT
             "foreground",   // MODE_FOREGROUND
-            "ask",          // MODE_ASK
     };
 
     /**
@@ -196,8 +188,7 @@ public class AppOpsManager {
     // when adding one of these:
     //  - increment _NUM_OP
     //  - define an OPSTR_* constant (marked as @SystemApi)
-    //  - add rows to sOpToSwitch, sOpToString, sOpNames, sOpToPerms, sOpDefault,
-    //    sOpDefaultStrictMode, sOpToOpString, sOpStrictMode.
+    //  - add rows to sOpToSwitch, sOpToString, sOpNames, sOpToPerms, sOpDefault
     //  - add descriptive strings to Settings/res/values/arrays.xml
     //  - add the op to the appropriate template in AppOpsState.OpsTemplate (settings app)
 
@@ -361,16 +352,10 @@ public class AppOpsManager {
     public static final int OP_START_FOREGROUND = 76;
     /** @hide */
     public static final int OP_BLUETOOTH_SCAN = 77;
-    /** @hide Bluetooth state change */
-    public static final int OP_BLUETOOTH_CHANGE = 78;
-    /** @hide Boot completed */
-    public static final int OP_BOOT_COMPLETED = 79;
-    /** @hide NFC state change */
-    public static final int OP_NFC_CHANGE = 80;
-    /** @hide Data connect state change */
-    public static final int OP_DATA_CONNECT_CHANGE = 81;
     /** @hide */
-    public static final int _NUM_OP = 82;
+    public static final int OP_BOOT_COMPLETED = 78;
+    /** @hide */
+    public static final int _NUM_OP = 79;
 
     /** Access to coarse location information. */
     public static final String OPSTR_COARSE_LOCATION = "android:coarse_location";
@@ -484,6 +469,9 @@ public class AppOpsManager {
     /** Answer incoming phone calls */
     public static final String OPSTR_ANSWER_PHONE_CALLS
             = "android:answer_phone_calls";
+    /** Required for start at boot **/
+    private static final String OPSTR_BOOT_COMPLETED =
+            "android:boot_completed";
     /**
      * Accept call handover
      * @hide
@@ -614,14 +602,6 @@ public class AppOpsManager {
     public static final String OPSTR_START_FOREGROUND = "android:start_foreground";
     /** @hide */
     public static final String OPSTR_BLUETOOTH_SCAN = "android:bluetooth_scan";
-    /** @hide */
-    public static final String OPSTR_BLUETOOTH_CHANGE = "android:bluetooth_change";
-    /** @hide */
-    public static final String OPSTR_BOOT_COMPLETED = "android:boot_completed";
-    /** @hide */
-    public static final String OPSTR_NFC_CHANGE = "android:nfc_change";
-    /** @hide */
-    public static final String OPSTR_DATA_CONNECT_CHANGE = "android:data_connect_change";
 
     // Warning: If an permission is added here it also has to be added to
     // com.android.packageinstaller.permission.utils.EventLogger
@@ -683,8 +663,8 @@ public class AppOpsManager {
      */
     private static int[] sOpToSwitch = new int[] {
             OP_COARSE_LOCATION,                 // COARSE_LOCATION
-            OP_COARSE_LOCATION,                 // FINE_LOCATION
-            OP_COARSE_LOCATION,                 // GPS
+            OP_FINE_LOCATION,                   // FINE_LOCATION
+            OP_GPS,                             // GPS
             OP_VIBRATE,                         // VIBRATE
             OP_READ_CONTACTS,                   // READ_CONTACTS
             OP_WRITE_CONTACTS,                  // WRITE_CONTACTS
@@ -692,7 +672,7 @@ public class AppOpsManager {
             OP_WRITE_CALL_LOG,                  // WRITE_CALL_LOG
             OP_READ_CALENDAR,                   // READ_CALENDAR
             OP_WRITE_CALENDAR,                  // WRITE_CALENDAR
-            OP_WIFI_SCAN,                       // WIFI_SCAN
+            OP_COARSE_LOCATION,                 // WIFI_SCAN
             OP_POST_NOTIFICATION,               // POST_NOTIFICATION
             OP_COARSE_LOCATION,                 // NEIGHBORING_CELLS
             OP_CALL_PHONE,                      // CALL_PHONE
@@ -723,8 +703,8 @@ public class AppOpsManager {
             OP_AUDIO_NOTIFICATION_VOLUME,       // AUDIO_NOTIFICATION_VOLUME
             OP_AUDIO_BLUETOOTH_VOLUME,          // AUDIO_BLUETOOTH_VOLUME
             OP_WAKE_LOCK,                       // WAKE_LOCK
-            OP_COARSE_LOCATION,                 // MONITOR_LOCATION
-            OP_COARSE_LOCATION,                 // MONITOR_HIGH_POWER_LOCATION
+            OP_FINE_LOCATION,                   // MONITOR_LOCATION
+            OP_FINE_LOCATION,                   // MONITOR_HIGH_POWER_LOCATION
             OP_GET_USAGE_STATS,                 // GET_USAGE_STATS
             OP_MUTE_MICROPHONE,                 // MUTE_MICROPHONE
             OP_TOAST_WINDOW,                    // TOAST_WINDOW
@@ -760,10 +740,7 @@ public class AppOpsManager {
             OP_MANAGE_IPSEC_TUNNELS,            // MANAGE_IPSEC_HANDOVERS
             OP_START_FOREGROUND,                // START_FOREGROUND
             OP_BLUETOOTH_SCAN,                  // BLUETOOTH_SCAN
-            OP_BLUETOOTH_CHANGE,                // BLUETOOTH_CHANGE
-            OP_BOOT_COMPLETED,                  // BOOT_COMPLETED
-            OP_NFC_CHANGE,                      // NFC_CHANGE
-            OP_DATA_CONNECT_CHANGE,             // DATA_CONNECT_CHANGE
+            OP_BOOT_COMPLETED,                  // AppOp Boot Completed
     };
 
     /**
@@ -848,10 +825,7 @@ public class AppOpsManager {
             OPSTR_MANAGE_IPSEC_TUNNELS,
             OPSTR_START_FOREGROUND,
             OPSTR_BLUETOOTH_SCAN,
-            OPSTR_BLUETOOTH_CHANGE,
             OPSTR_BOOT_COMPLETED,
-            OPSTR_NFC_CHANGE,
-            OPSTR_DATA_CONNECT_CHANGE,
     };
 
     /**
@@ -937,10 +911,7 @@ public class AppOpsManager {
             "MANAGE_IPSEC_TUNNELS",
             "START_FOREGROUND",
             "BLUETOOTH_SCAN",
-            "BLUETOOTH_CHANGE",
             "BOOT_COMPLETED",
-            "NFC_CHANGE",
-            "DATA_CONNECT_CHANGE",
     };
 
     /**
@@ -958,7 +929,7 @@ public class AppOpsManager {
             android.Manifest.permission.WRITE_CALL_LOG,
             android.Manifest.permission.READ_CALENDAR,
             android.Manifest.permission.WRITE_CALENDAR,
-            null, // no permission for wifi scan available
+            android.Manifest.permission.ACCESS_WIFI_STATE,
             null, // no permission required for notifications
             null, // neighboring cells shares the coarse location perm
             android.Manifest.permission.CALL_PHONE,
@@ -1025,11 +996,8 @@ public class AppOpsManager {
             Manifest.permission.ACCEPT_HANDOVER,
             null, // no permission for OP_MANAGE_IPSEC_TUNNELS
             Manifest.permission.FOREGROUND_SERVICE,
-            null, // no permission for OP_BLUETOOTH_SCAN
-            null,
-            Manifest.permission.RECEIVE_BOOT_COMPLETED,
-            Manifest.permission.NFC,
-            null,
+            null, // no permission for OP_BLUETOOTH_SCAN,
+            Manifest.permission.RECEIVE_BOOT_COMPLETED
     };
 
     /**
@@ -1116,10 +1084,7 @@ public class AppOpsManager {
             null, // MANAGE_IPSEC_TUNNELS
             null, // START_FOREGROUND
             null, // maybe should be UserManager.DISALLOW_SHARE_LOCATION, //BLUETOOTH_SCAN
-            null, // BLUETOOTH_CHANGE
-            null, // BOOT_COMPLETED
-            null, // NFC_CHANGE
-            null, // DATA_CONNECT_CHANGE
+            null, //BOOT_COMPLETED
     };
 
     /**
@@ -1205,10 +1170,7 @@ public class AppOpsManager {
             false, // MANAGE_IPSEC_HANDOVERS
             false, // START_FOREGROUND
             true, // BLUETOOTH_SCAN
-            true, // BLUETOOTH_CHANGE
-            true, // BOOT_COMPLETED
-            true, // NFC_CHANGE
-            true, // DATA_CONNECT_CHANGE
+            false, // BOOT_COMPLETED
     };
 
     /**
@@ -1293,187 +1255,7 @@ public class AppOpsManager {
             AppOpsManager.MODE_ERRORED,  // MANAGE_IPSEC_TUNNELS
             AppOpsManager.MODE_ALLOWED,  // OP_START_FOREGROUND
             AppOpsManager.MODE_ALLOWED,  // OP_BLUETOOTH_SCAN
-            AppOpsManager.MODE_ALLOWED,  // OP_BLUETOOTH_CHANGE
-            AppOpsManager.MODE_ALLOWED,  // OP_BOOT_COMPLETED
-            AppOpsManager.MODE_ALLOWED,  // OP_NFC_CHANGE
-            AppOpsManager.MODE_ALLOWED,  // OP_DATA_CONNECT_CHANGE
-    };
-
-    /**
-     * This specifies the default mode for each strict operation.
-     */
-
-    private static int[] sOpDefaultStrictMode = new int[] {
-            AppOpsManager.MODE_ASK,     // OP_COARSE_LOCATION
-            AppOpsManager.MODE_ASK,     // OP_FINE_LOCATION
-            AppOpsManager.MODE_ASK,     // OP_GPS
-            AppOpsManager.MODE_ALLOWED, // OP_VIBRATE
-            AppOpsManager.MODE_ASK,     // OP_READ_CONTACTS
-            AppOpsManager.MODE_ASK,     // OP_WRITE_CONTACTS
-            AppOpsManager.MODE_ASK,     // OP_READ_CALL_LOG
-            AppOpsManager.MODE_ASK,     // OP_WRITE_CALL_LOG
-            AppOpsManager.MODE_ALLOWED, // OP_READ_CALENDAR
-            AppOpsManager.MODE_ALLOWED, // OP_WRITE_CALENDAR
-            AppOpsManager.MODE_ASK,     // OP_WIFI_SCAN
-            AppOpsManager.MODE_ALLOWED, // OP_POST_NOTIFICATION
-            AppOpsManager.MODE_ALLOWED, // OP_NEIGHBORING_CELLS
-            AppOpsManager.MODE_ASK,     // OP_CALL_PHONE
-            AppOpsManager.MODE_ASK,     // OP_READ_SMS
-            AppOpsManager.MODE_ASK,     // OP_WRITE_SMS
-            AppOpsManager.MODE_ASK,     // OP_RECEIVE_SMS
-            AppOpsManager.MODE_ALLOWED, // OP_RECEIVE_EMERGECY_SMS
-            AppOpsManager.MODE_ASK,     // OP_RECEIVE_MMS
-            AppOpsManager.MODE_ALLOWED, // OP_RECEIVE_WAP_PUSH
-            AppOpsManager.MODE_ASK,     // OP_SEND_SMS
-            AppOpsManager.MODE_ALLOWED, // OP_READ_ICC_SMS
-            AppOpsManager.MODE_ALLOWED, // OP_WRITE_ICC_SMS
-            AppOpsManager.MODE_ALLOWED, // OP_WRITE_SETTINGS
-            AppOpsManager.MODE_ALLOWED, // OP_SYSTEM_ALERT_WINDOW
-            AppOpsManager.MODE_ALLOWED, // OP_ACCESS_NOTIFICATIONS
-            AppOpsManager.MODE_ASK,     // OP_CAMERA
-            AppOpsManager.MODE_ASK,     // OP_RECORD_AUDIO
-            AppOpsManager.MODE_ALLOWED, // OP_PLAY_AUDIO
-            AppOpsManager.MODE_ALLOWED, // OP_READ_CLIPBOARD
-            AppOpsManager.MODE_ALLOWED, // OP_WRITE_CLIPBOARD
-            AppOpsManager.MODE_ALLOWED, // OP_TAKE_MEDIA_BUTTONS
-            AppOpsManager.MODE_ALLOWED, // OP_TAKE_AUDIO_FOCUS
-            AppOpsManager.MODE_ALLOWED, // OP_AUDIO_MASTER_VOLUME
-            AppOpsManager.MODE_ALLOWED, // OP_AUDIO_VOICE_VOLUME
-            AppOpsManager.MODE_ALLOWED, // OP_AUDIO_RING_VOLUME
-            AppOpsManager.MODE_ALLOWED, // OP_AUDIO_MEDIA_VOLUME
-            AppOpsManager.MODE_ALLOWED, // OP_AUDIO_ALARM_VOLUME
-            AppOpsManager.MODE_ALLOWED, // OP_AUDIO_NOTIFICATION_VOLUME
-            AppOpsManager.MODE_ALLOWED, // OP_AUDIO_BLUETOOTH_VOLUME
-            AppOpsManager.MODE_ALLOWED, // OP_WAKE_LOCK
-            AppOpsManager.MODE_ALLOWED, // OP_MONITOR_LOCATION
-            AppOpsManager.MODE_ASK,     // OP_MONITOR_HIGH_POWER_LOCATION
-            AppOpsManager.MODE_DEFAULT, // OP_GET_USAGE_STATS
-            AppOpsManager.MODE_ALLOWED, // OP_MUTE_MICROPHONE
-            AppOpsManager.MODE_ALLOWED, // OP_TOAST_WINDOW
-            AppOpsManager.MODE_IGNORED, // OP_PROJECT_MEDIA
-            AppOpsManager.MODE_IGNORED, // OP_ACTIVATE_VPN
-            AppOpsManager.MODE_ALLOWED, // OP WALLPAPER
-            AppOpsManager.MODE_ALLOWED, // OP_ASSIST_STRUCTURE
-            AppOpsManager.MODE_ALLOWED, // OP_ASSIST_SCREENSHOT
-            AppOpsManager.MODE_ALLOWED, // OP_READ_PHONE_STATE
-            AppOpsManager.MODE_ALLOWED, // OP_ADD_VOICEMAIL
-            AppOpsManager.MODE_ALLOWED, // OP_USE_SIP
-            AppOpsManager.MODE_ALLOWED, // OP_PROCESS_OUTGOING_CALLS
-            AppOpsManager.MODE_ALLOWED, // OP_USE_FINGERPRINT
-            AppOpsManager.MODE_ALLOWED, // OP_BODY_SENSORS
-            AppOpsManager.MODE_ALLOWED, // OP_READ_CELL_BROADCASTS
-            AppOpsManager.MODE_ERRORED, // OP_MOCK_LOCATION
-            AppOpsManager.MODE_ALLOWED, // OP_READ_EXTERNAL_STORAGE
-            AppOpsManager.MODE_ALLOWED, // OP_WRITE_EXTERNAL_STORAGE
-            AppOpsManager.MODE_ALLOWED, // OP_TURN_ON_SCREEN
-            AppOpsManager.MODE_ALLOWED, // OP_GET_ACCOUNTS
-            AppOpsManager.MODE_ASK,     // MODE_RUN_IN_BACKGROUND
-            AppOpsManager.MODE_ALLOWED, // OP_AUDIO_ACCESSIBILITY_VOLUME
-            AppOpsManager.MODE_ALLOWED, // READ_PHONE_NUMBERS
-            AppOpsManager.MODE_DEFAULT, // OP_REQUEST_INSTALL_PACKAGES
-            AppOpsManager.MODE_ALLOWED, // OP_PICTURE_IN_PICTURE
-            AppOpsManager.MODE_DEFAULT, // OP_INSTANT_APP_START_FOREGROUND
-            AppOpsManager.MODE_ALLOWED, // ANSWER_PHONE_CALLS
-            AppOpsManager.MODE_ASK,     // OP_RUN_ANY_IN_BACKGROUND
-            AppOpsManager.MODE_ALLOWED, // OP_CHANGE_WIFI_STATE
-            AppOpsManager.MODE_ALLOWED, // REQUEST_DELETE_PACKAGES
-            AppOpsManager.MODE_ALLOWED, // OP_BIND_ACCESSIBILITY_SERVICE
-            AppOpsManager.MODE_ALLOWED, // ACCEPT_HANDOVER
-            AppOpsManager.MODE_ERRORED, // MANAGE_IPSEC_TUNNELS
-            AppOpsManager.MODE_ALLOWED, // OP_START_FOREGROUND
-            AppOpsManager.MODE_ALLOWED, // OP_BLUETOOTH_SCAN
-            AppOpsManager.MODE_ASK,     // OP_BLUETOOTH_CHANGE
-            AppOpsManager.MODE_ASK,     // OP_BOOT_COMPLETED
-            AppOpsManager.MODE_ASK,     // OP_NFC_CHANGE
-            AppOpsManager.MODE_ASK,     // OP_DATA_CONNECT_CHANGE
-    };
-
-    /**
-     * This specifies if operation is in strict mode.
-     */
-    private final static boolean[] sOpStrictMode = new boolean[] {
-            true,  // COARSE_LOCATION
-            true,  // FINE_LOCATION
-            true,  // GPS
-            false, // VIBRATE
-            true,  // READ_CONTACTS
-            true,  // WRITE_CONTACTS
-            true,  // READ_CALL_LOG
-            true,  // WRITE_CALL_LOG
-            false, // READ_CALENDAR
-            false, // WRITE_CALENDAR
-            true,  // WIFI_SCAN
-            false, // POST_NOTIFICATION
-            false, // NEIGHBORING_CELLS
-            true,  // CALL_PHONE
-            true,  // READ_SMS
-            true,  // WRITE_SMS
-            true,  // RECEIVE_SMS
-            false, // RECEIVE_EMERGECY_SMS
-            true,  // RECEIVE_MMS
-            false, // RECEIVE_WAP_PUSH
-            true,  // SEND_SMS
-            true,  // READ_ICC_SMS
-            true,  // WRITE_ICC_SMS
-            true,  // WRITE_SETTINGS
-            false, // SYSTEM_ALERT_WINDOW
-            false, // ACCESS_NOTIFICATIONS
-            true,  // CAMERA
-            true,  // RECORD_AUDIO
-            true,  // PLAY_AUDIO
-            false, // READ_CLIPBOARD
-            false, // WRITE_CLIPBOARD
-            true,  // TAKE_MEDIA_BUTTONS
-            true,  // TAKE_AUDIO_FOCUS
-            false, // AUDIO_MASTER_VOLUME
-            false, // AUDIO_VOICE_VOLUME
-            false, // AUDIO_RING_VOLUME
-            false, // AUDIO_MEDIA_VOLUME
-            false, // AUDIO_ALARM_VOLUME
-            false, // AUDIO_NOTIFICATION_VOLUME
-            false, // AUDIO_BLUETOOTH_VOLUME
-            false, // WAKE_LOCK
-            true,  // MONITOR_LOCATION
-            true,  // MONITOR_HIGH_POWER_LOCATION
-            true,  // GET_USAGE_STATS
-            false, // MUTE_MICROPHONE
-            false, // TOAST_WINDOW
-            true,  // PROJECT_MEDIA
-            false, // ACTIVATE_VPN
-            false, // WALLPAPER
-            false, // ASSIST_STRUCTURE
-            false, // ASSIST_SCREENSHOT
-            true,  // READ_PHONE_STATE
-            true,  // ADD_VOICEMAIL
-            true,  // USE_SIP
-            true,  // PROCESS_OUTGOING_CALLS
-            true,  // USE_FINGERPRINT
-            true,  // BODY_SENSORS
-            false, // READ_CELL_BROADCASTS
-            true,  // MOCK_LOCATION
-            true,  // READ_EXTERNAL_STORAGE
-            true,  // WRITE_EXTERNAL_STORAGE
-            false, // TURN_ON_SCREEN
-            false, // GET_ACCOUNTS
-            true,  // RUN_IN_BACKGROUND
-            false, // AUDIO_ACCESSIBILITY_VOLUME
-            true,  // READ_PHONE_NUMBERS
-            true,  // REQUEST_INSTALL_PACKAGES
-            true,  // ENTER_PICTURE_IN_PICTURE_ON_HIDE
-            true,  // INSTANT_APP_START_FOREGROUND
-            false, // ANSWER_PHONE_CALLS
-            true,  // OP_RUN_ANY_IN_BACKGROUND
-            false, // OP_CHANGE_WIFI_STATE
-            false, // OP_REQUEST_DELETE_PACKAGES
-            false, // OP_BIND_ACCESSIBILITY_SERVICE
-            false, // ACCEPT_HANDOVER
-            false, // MANAGE_IPSEC_HANDOVERS
-            false, // START_FOREGROUND
-            true,  // BLUETOOTH_SCAN
-            true,  // BLUETOOTH_CHANGE
-            true,  // BOOT_COMPLETED
-            true,  // NFC_CHANGE
-            true,  // DATA_CONNECT_CHANGE
+            AppOpsManager.MODE_ALLOWED, // OP_BOOT_COMPLETED
     };
 
     /**
@@ -1562,10 +1344,7 @@ public class AppOpsManager {
             false, // MANAGE_IPSEC_TUNNELS
             false, // START_FOREGROUND
             false, // BLUETOOTH_SCAN
-            false, // OP_BLUETOOTH_CHANGE
             false, // OP_BOOT_COMPLETED
-            false, // OP_NFC_CHANGE
-            false, // OP_DATA_CONNECT_CHANGE
     };
 
     /**
@@ -1580,18 +1359,6 @@ public class AppOpsManager {
 
     private static HashMap<String, Integer> sNameToOp = new HashMap<String, Integer>();
 
-    /**
-     * App op guard states.
-     * @hide
-     */
-    public static final int[] PRIVACY_GUARD_OP_STATES = new int[] {
-            OP_COARSE_LOCATION,
-            OP_READ_CALL_LOG,
-            OP_READ_CONTACTS,
-            OP_READ_CALENDAR,
-            OP_READ_SMS,
-    };
-
     static {
         if (sOpToSwitch.length != _NUM_OP) {
             throw new IllegalStateException("sOpToSwitch length " + sOpToSwitch.length
@@ -1613,10 +1380,6 @@ public class AppOpsManager {
             throw new IllegalStateException("sOpDefaultMode length " + sOpDefaultMode.length
                     + " should be " + _NUM_OP);
         }
-        if (sOpDefaultStrictMode.length != _NUM_OP) {
-            throw new IllegalStateException("sOpDefaultStrictMode length "
-                    + sOpDefaultStrictMode.length + " should be " + _NUM_OP);
-        }
         if (sOpDisableReset.length != _NUM_OP) {
             throw new IllegalStateException("sOpDisableReset length " + sOpDisableReset.length
                     + " should be " + _NUM_OP);
@@ -1629,10 +1392,6 @@ public class AppOpsManager {
             throw new IllegalStateException("sOpAllowSYstemRestrictionsBypass length "
                     + sOpRestrictions.length + " should be " + _NUM_OP);
         }
-        if (sOpStrictMode.length != _NUM_OP) {
-            throw new IllegalStateException("sOpStrictMode length " + sOpStrictMode.length
-                    + " should be " + _NUM_OP);
-        }
         for (int i=0; i<_NUM_OP; i++) {
             if (sOpToString[i] != null) {
                 sOpStrToOp.put(sOpToString[i], i);
@@ -1726,15 +1485,8 @@ public class AppOpsManager {
      * Retrieve the default mode for the operation.
      * @hide
      */
-    public static int opToDefaultMode(int op, boolean isStrict) {
-        if (isStrict) {
-            return sOpDefaultStrictMode[op];
-        }
-        return sOpDefaultMode[op];
-    }
-
     public static int opToDefaultMode(int op) {
-        return opToDefaultMode(op, false);
+        return sOpDefaultMode[op];
     }
 
     /**
@@ -1852,8 +1604,8 @@ public class AppOpsManager {
         }
 
         public OpEntry(int op, int mode, long[] times, long[] rejectTimes, int duration,
-                boolean running, int proxyUid, String proxyPackage,
-                int allowedCount, int ignoredCount) {
+                boolean running, int proxyUid, String proxyPackage, int allowedCount,
+                int ignoredCount) {
             mOp = op;
             mMode = mode;
             mTimes = new long[_NUM_UID_STATE];
@@ -1870,8 +1622,8 @@ public class AppOpsManager {
 
         public OpEntry(int op, int mode, long[] times, long[] rejectTimes, int duration,
                 int proxyUid, String proxyPackage, int allowedCount, int ignoredCount) {
-            this(op, mode, times, rejectTimes, duration, duration == -1, proxyUid, proxyPackage,
-                    allowedCount, ignoredCount);
+            this(op, mode, times, rejectTimes, duration, duration == -1, proxyUid,
+                 proxyPackage, allowedCount, ignoredCount);
         }
 
         public int getOp() {
@@ -2885,31 +2637,6 @@ public class AppOpsManager {
         return time;
     }
 
-    /**
-     * Check if op in strict mode
-     * @hide
-     */
-    public static boolean isStrictOp(int code) {
-        return sOpStrictMode[code];
-    }
-
-    /** @hide */
-    public boolean getPrivacyGuardSettingForPackage(int uid, String packageName) {
-        try {
-            return mService.getPrivacyGuardSettingForPackage(uid, packageName);
-        } catch (RemoteException e) {
-        }
-        return false;
-    }
-
-    /** @hide */
-    public void setPrivacyGuardSettingForPackage(int uid, String packageName, boolean state) {
-        try {
-            mService.setPrivacyGuardSettingForPackage(uid, packageName, state);
-        } catch (RemoteException e) {
-        }
-    }
-
     /** @hide */
     public void resetCounters() {
         try {
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 180a511a8458..d82404219fd2 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -899,19 +899,6 @@ public final class Settings {
     public static final String ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS =
             "android.settings.IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS";
 
-    /**
-     * @hide
-     * Activity Action: Show the "app ops" details screen.
-     * <p>
-     * Input: The Intent's data URI specifies the application package name
-     * to be shown, with the "package" scheme.  That is "package:com.my.app".
-     * <p>
-     * Output: Nothing.
-     */
-    @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
-    public static final String ACTION_APP_OPS_DETAILS_SETTINGS =
-            "android.settings.APP_OPS_DETAILS_SETTINGS";
-
     /**
      * @hide
      * Activity Action: Show the "app ops" settings screen.
@@ -9708,22 +9695,6 @@ public final class Settings {
          */
         public static final String NIGHT_BRIGHTNESS_VALUE = "night_brightness_value";
 
-        /**
-         * @hide
-         */
-        public static final String PRIVACY_GUARD_DEFAULT = "privacy_guard_default";
-
-        /**
-         * @hide
-         */
-        public static final String PRIVACY_GUARD_NOTIFICATION = "privacy_guard_notification";
-
-        /**
-         * Whether to display the ADB notification.
-         * @hide
-         */
-        public static final String ADB_NOTIFY = "adb_notify";
-
         /**
          * Names of the service components that the current user has explicitly allowed to
          * be a VR mode listener, separated by ':'.
diff --git a/core/java/com/android/internal/app/IAppOpsService.aidl b/core/java/com/android/internal/app/IAppOpsService.aidl
index c2a1a3432133..cf9a18c24ade 100644
--- a/core/java/com/android/internal/app/IAppOpsService.aidl
+++ b/core/java/com/android/internal/app/IAppOpsService.aidl
@@ -57,10 +57,6 @@ interface IAppOpsService {
 
     void startWatchingModeWithFlags(int op, String packageName, int flags, IAppOpsCallback callback);
 
-    // Privacy guard methods
-    boolean getPrivacyGuardSettingForPackage(int uid, String packageName);
-    void setPrivacyGuardSettingForPackage(int uid, String packageName, boolean state);
-
     // AppOps accounting
     void resetCounters();
 }
diff --git a/core/res/res/drawable/stat_notify_privacy_guard.xml b/core/res/res/drawable/stat_notify_privacy_guard.xml
deleted file mode 100644
index de3aa7711b17..000000000000
--- a/core/res/res/drawable/stat_notify_privacy_guard.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="26dp"
-    android:height="24dp"
-    android:viewportWidth="26"
-    android:viewportHeight="24">
-
-    <path
-        android:pathData="M21.539,8.978c-0.132,2.629-0.803,5.264-2.162,7.534  c-1.186,1.991-2.889,3.675-4.905,4.82c-0.459,0.259-0.932,0.494-1.427,0.676c-0.061,0.029-0.122-0.014-0.18-0.032 c-1.047-0.415-2.019-1.006-2.909-1.693c-1.807-1.397-3.239-3.263-4.151-5.356c-0.725-1.651-1.137-3.429-1.297-5.222 C4.33,7.77,4.442,5.816,4.73,3.896c0.601,0.053,1.207,0.031,1.807-0.017c1.309-0.115,2.596-0.41,3.849-0.799 c0.888-0.283,1.766-0.604,2.611-0.999c1.13,0.523,2.311,0.935,3.512,1.26c1.549,0.412,3.157,0.666,4.763,0.562 c0.116,0.846,0.216,1.695,0.261,2.548c0.002,0.241,0.042,0.481,0.037,0.723C21.574,7.776,21.594,8.379,21.539,8.978z"
-        android:fillColor="#FFFFFFFF" />
-</vector>
diff --git a/core/res/res/layout/permission_confirmation_dialog.xml b/core/res/res/layout/permission_confirmation_dialog.xml
deleted file mode 100644
index 1727286faaa6..000000000000
--- a/core/res/res/layout/permission_confirmation_dialog.xml
+++ /dev/null
@@ -1,67 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-/*
-** Copyright (c) 2013, The Linux Foundation. All rights reserved.
-** Not a Contribution.
-**
-** Copyright 2012 The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the "License");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an "AS IS" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
--->
-
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/parentPanel"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:layout_marginLeft="8dip"
-    android:layout_marginRight="8dip"
-    android:orientation="vertical">
-
-    <TextView android:id="@+id/permission_text"
-        style="?android:attr/textAppearanceMedium"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:paddingLeft="20dip"
-        android:paddingRight="20dip"
-        android:paddingTop="16dip"
-        android:paddingBottom="16dip" />
-
-    <TableLayout android:id="@+id/permission_remember_layout"
-        android:shrinkColumns="1"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:gravity="center_vertical"
-        android:paddingLeft="16dip"
-        android:paddingRight="16dip">
-
-        <TableRow
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content" >
-            <RelativeLayout android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:paddingLeft="8dip" >
-            <CheckBox android:id="@+id/permission_remember_choice_checkbox"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content" />
-            </RelativeLayout>
-            <TextView android:id="@+id/permission_remember_choice_text"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:text="@string/permission_remember_choice" />
-        </TableRow>
-
-    </TableLayout>
-
-</LinearLayout>
diff --git a/core/res/res/values/bliss_strings.xml b/core/res/res/values/bliss_strings.xml
index 8bba2ca36eae..bf625abaab7e 100644
--- a/core/res/res/values/bliss_strings.xml
+++ b/core/res/res/values/bliss_strings.xml
@@ -70,99 +70,6 @@
     <!-- [CHAR LIMIT=NONE] Error when a package is installed but got the missing fonts.xml file, notifying the user why it isn't showing up. -->
     <string name="fontservice_incompatible_font">The font package you\'ve installed is not compatible due to missing fonts.xml on their files. Please contact the package developer for support.</string>
 
-    <!-- App ops requests -->
-    <string name="app_ops_access_camera">access the camera</string>
-    <string name="app_ops_access_location">access your location</string>
-    <string name="app_ops_access_notifications">read your notifications</string>
-    <string name="app_ops_activate_vpn">activate a VPN</string>
-    <string name="app_ops_add_voicemail">add a voicemail</string>
-    <string name="app_ops_app_start_foreground">start instant app in foreground</string>
-    <string name="app_ops_assist_screenshot">take a screenshot</string>
-    <string name="app_ops_assist_structure">use assist structure</string>
-    <string name="app_ops_audio_accessibility_volume">audio accessibility volume</string>
-    <string name="app_ops_auto_start">start at power up</string>
-    <string name="app_ops_bind_accessibility_service">bind accessibility service</string>
-    <string name="app_ops_bluetooth_scan">bluetooth scan</string>
-    <string name="app_ops_change_wallpaper">change the wallpaper</string>
-    <string name="app_ops_delete_call_log">delete your call log</string>
-    <string name="app_ops_delete_contacts">delete your contacts</string>
-    <string name="app_ops_delete_mms">delete your MMS messages</string>
-    <string name="app_ops_delete_sms">delete your SMS messages</string>
-    <string name="app_ops_draw_on_top">draw windows on top</string>
-    <string name="app_ops_get_accounts">get device accounts</string>
-    <string name="app_ops_get_usage_stats">get app usage stats</string>
-    <string name="app_ops_accept_handover">handover of a call from another app</string>
-    <string name="app_ops_install_packages">install packages</string>
-    <string name="app_ops_keep_device_awake">keep your device awake</string>
-    <string name="app_ops_manage_ipsec_tunnels">manage ipsec tunnels</string>
-    <string name="app_ops_make_phone_call">make a phone call</string>
-    <string name="app_ops_mock_location">mock your location</string>
-    <string name="app_ops_modify_calendar">update your calendar</string>
-    <string name="app_ops_modify_call_log">update the call log</string>
-    <string name="app_ops_modify_clipboard">modify the clipboard</string>
-    <string name="app_ops_modify_contacts">update your contacts</string>
-    <string name="app_ops_modify_settings">update system settings</string>
-    <string name="app_ops_mute_unmute_microphone">mute/unmute the microphone</string>
-    <string name="app_ops_phone_calls">answer phone calls</string>
-    <string name="app_ops_picture_in_picture">use picture in picture</string>
-    <string name="app_ops_play_audio">play audio</string>
-    <string name="app_ops_post_notification">post a notification</string>
-    <string name="app_ops_project_media">project media</string>
-    <string name="app_ops_read_calendar">read your calendar</string>
-    <string name="app_ops_read_call_log">read the call log</string>
-    <string name="app_ops_read_cell_broadcasts">read cell broadcasts</string>
-    <string name="app_ops_read_clipboard">read the clipboard</string>
-    <string name="app_ops_read_contacts">read your contacts</string>
-    <string name="app_ops_read_external_storage">read external storage</string>
-    <string name="app_ops_read_mms">read your MMS messages</string>
-    <string name="app_ops_read_phone_numbers">read phone numbers</string>
-    <string name="app_ops_read_phone_state">access phone state</string>
-    <string name="app_ops_read_sms">read your SMS messages</string>
-    <string name="app_ops_receive_sms">receive an SMS message</string>
-    <string name="app_ops_receive_emergency_broadcast">receive an emergency broadcast message</string>
-    <string name="app_ops_record_audio">record audio</string>
-    <string name="app_ops_request_delete_packages">request delete packages</string>
-    <string name="app_ops_run_in_background">run in background</string>
-    <string name="app_ops_run_any_in_background">run any in background</string>
-    <string name="app_ops_scan_wifi">scan Wi-Fi networks</string>
-    <string name="app_ops_send_mms">send an MMS message</string>
-    <string name="app_ops_send_sms">send an SMS message</string>
-    <string name="app_ops_start_at_bootup">start at power up</string>
-    <string name="app_ops_start_foreground">start foreground</string>
-    <string name="app_ops_toast_window">display toast messages</string>
-    <string name="app_ops_toggle_bluetooth">toggle Bluetooth</string>
-    <string name="app_ops_toggle_mobile_data">toggle cellular data</string>
-    <string name="app_ops_toggle_nfc">toggle NFC</string>
-    <string name="app_ops_toggle_wifi">toggle Wi-Fi</string>
-    <string name="app_ops_turn_on_screen">turn the screen on</string>
-    <string name="app_ops_use_alarm_volume">control alarm volume</string>
-    <string name="app_ops_use_audio_focus">control the audio focus</string>
-    <string name="app_ops_use_bluetooth_volume">control the Bluetooth volume</string>
-    <string name="app_ops_use_body_sensors">use body sensors</string>
-    <string name="app_ops_use_fingerprint">use fingerprint</string>
-    <string name="app_ops_use_master_volume">control the master volume</string>
-    <string name="app_ops_use_media_buttons">use the media buttons</string>
-    <string name="app_ops_use_media_volume">control the media volume</string>
-    <string name="app_ops_use_notification_volume">control the notification volume</string>
-    <string name="app_ops_use_ring_volume">control the ringtone volume</string>
-    <string name="app_ops_use_vibrate">use haptic feedback</string>
-    <string name="app_ops_use_voice_volume">control the voice call volume</string>
-    <string name="app_ops_wifi_change">change Wi-Fi state</string>
-    <string name="app_ops_write_external_storage">write external storage</string>
-    <string name="app_ops_write_mms">write an MMS message</string>
-    <string name="app_ops_write_sms">write an SMS message</string>
-
-    <!-- Privacy Guard -->
-    <string name="permlab_changePrivacyGuardState">enable or disable Privacy Guard</string>
-    <string name="permdesc_changePrivacyGuardState">Allows the app to change whether another app runs with Privacy Guard. When an app is running with Privacy Guard, it will not have access to personal data such as contacts, call logs, or messages.</string>
-    <string name="privacy_guard_notification">Privacy Guard active</string>
-    <string name="privacy_guard_notification_detail"><xliff:g id="app">%1$s</xliff:g> will not be able to access personal data</string>
-    <string name="privacy_guard_dialog_title">Privacy Guard</string>
-    <string name="privacy_guard_dialog_summary"><xliff:g id="app">%1$s</xliff:g> would like to <xliff:g id="op">%2$s</xliff:g>.</string>
-
-    <!-- Text of the checkbox for the permission confirmation dialog to remember the user's choice. [CHAR LIMIT=40] -->
-    <string name="permission_remember_choice">Remember my choice</string>
-
     <!-- Path to the library that contains a alternative device specific key handler -->
     <string name="config_alternativeDeviceKeyHandlerLib" translatable="false"></string>
     <!-- Name of that alternative key handler class -->
diff --git a/core/res/res/values/bliss_symbols.xml b/core/res/res/values/bliss_symbols.xml
index 74fe412b9b7b..4d9163b8dcb2 100644
--- a/core/res/res/values/bliss_symbols.xml
+++ b/core/res/res/values/bliss_symbols.xml
@@ -181,19 +181,4 @@
 
   <java-symbol type="bool" name="config_canForceDozeNotifications" />
 
-  <!-- Privacy Guard -->
-  <java-symbol type="drawable" name="stat_notify_privacy_guard" />
-  <java-symbol type="string" name="privacy_guard_notification" />
-  <java-symbol type="string" name="privacy_guard_notification_detail" />
-  <java-symbol type="string" name="privacy_guard_dialog_title" />
-  <java-symbol type="string" name="privacy_guard_dialog_summary" />
-  <java-symbol type="id" name="permission_text" />
-  <java-symbol type="id" name="permission_remember_layout" />
-  <java-symbol type="id" name="permission_remember_choice_checkbox" />
-  <java-symbol type="id" name="permission_remember_choice_text" />
-  <java-symbol type="string" name="allow" />
-  <java-symbol type="string" name="deny" />
-  <java-symbol type="layout" name="permission_confirmation_dialog" />
-  <java-symbol type="array" name="app_ops_labels" />
-
 </resources>
diff --git a/core/res/res/values/custom_arrays.xml b/core/res/res/values/custom_arrays.xml
deleted file mode 100644
index 0b9d2dc8477b..000000000000
--- a/core/res/res/values/custom_arrays.xml
+++ /dev/null
@@ -1,186 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2018 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-
-    <!-- Do not translate. App ops request strings -->
-    <string-array name="app_ops_labels" translatable="false">
-        <!-- OP_COARSE_LOCATION -->
-        <item>@string/app_ops_access_location</item>
-        <!-- OP_FINE_LOCATION -->
-        <item>@string/app_ops_access_location</item>
-        <!-- OP_GPS -->
-        <item>@string/app_ops_access_location</item>
-        <!-- OP_VIBRATE -->
-        <item>@string/app_ops_use_vibrate</item>
-        <!-- OP_READ_CONTACTS -->
-        <item>@string/app_ops_read_contacts</item>
-        <!-- OP_WRITE_CONTACTS -->
-        <item>@string/app_ops_modify_contacts</item>
-        <!-- OP_READ_CALL_LOG -->
-        <item>@string/app_ops_read_call_log</item>
-        <!-- OP_WRITE_CALL_LOG -->
-        <item>@string/app_ops_modify_call_log</item>
-        <!-- OP_READ_CALENDAR -->
-        <item>@string/app_ops_read_calendar</item>
-        <!-- OP_WRITE_CALENDAR -->
-        <item>@string/app_ops_modify_calendar</item>
-        <!-- OP_WIFI_SCAN -->
-        <item>@string/app_ops_scan_wifi</item>
-        <!-- OP_POST_NOTIFICATION -->
-        <item>@string/app_ops_post_notification</item>
-        <!-- OP_NEIGHBORING_CELLS -->
-        <item>@string/app_ops_access_location</item>
-        <!-- OP_CALL_PHONE -->
-        <item>@string/app_ops_make_phone_call</item>
-        <!-- OP_READ_SMS -->
-        <item>@string/app_ops_read_sms</item>
-        <!-- OP_WRITE_SMS -->
-        <item>@string/app_ops_write_sms</item>
-        '<!-- OP_RECEIVE_SMS -->
-        <item>@string/app_ops_receive_sms</item>
-        <!-- OPSTR_RECEIVE_EMERGENCY_BROADCAST -->
-        <item>@string/app_ops_receive_emergency_broadcast</item>
-        <!-- OP_RECEIVE_MMS -->
-        <item>@string/app_ops_receive_sms</item>
-        <!-- OP_RECEIVE_WAP_PUSH -->
-        <item>@string/app_ops_receive_sms</item>
-        <!-- OP_SEND_SMS -->
-        <item>@string/app_ops_send_sms</item>
-        <!-- OP_READ_ICC_SMS -->
-        <item>@string/app_ops_read_sms</item>
-        <!-- OP_WRITE_ICC_SMS -->
-        <item>@string/app_ops_write_sms</item>
-        <!-- OP_WRITE_SETTINGS -->
-        <item>@string/app_ops_modify_settings</item>
-        <!-- OP_SYSTEM_ALERT_WINDOW -->
-        <item>@string/app_ops_draw_on_top</item>
-        <!-- OP_ACCESS_NOTIFICATIONS -->
-        <item>@string/app_ops_access_notifications</item>
-        <!-- OP_CAMERA -->
-        <item>@string/app_ops_access_camera</item>
-        <!-- OP_RECORD_AUDIO -->
-        <item>@string/app_ops_record_audio</item>
-        <!-- OP_PLAY_AUDIO -->
-        <item>@string/app_ops_play_audio</item>
-        <!-- OP_READ_CLIPBOARD -->
-        <item>@string/app_ops_read_clipboard</item>
-        <!-- OP_WRITE_CLIPBOARD -->
-        <item>@string/app_ops_modify_clipboard</item>
-        <!-- OP_TAKE_MEDIA_BUTTONS -->
-        <item>@string/app_ops_use_media_buttons</item>
-        <!-- OP_TAKE_AUDIO_FOCUS -->
-        <item>@string/app_ops_use_audio_focus</item>
-        <!-- OP_AUDIO_MASTER_VOLUME -->
-        <item>@string/app_ops_use_master_volume</item>
-        <!-- OP_AUDIO_VOICE_VOLUME -->
-        <item>@string/app_ops_use_voice_volume</item>
-        <!-- OP_AUDIO_RING_VOLUME -->
-        <item>@string/app_ops_use_ring_volume</item>
-        <!-- OP_AUDIO_MEDIA_VOLUME -->
-        <item>@string/app_ops_use_media_volume</item>
-        <!-- OP_AUDIO_ALARM_VOLUME -->
-        <item>@string/app_ops_use_alarm_volume</item>
-        <!-- OP_AUDIO_NOTIFICATION_VOLUME -->
-        <item>@string/app_ops_use_notification_volume</item>
-        <!-- OP_AUDIO_BLUETOOTH_VOLUME -->
-        <item>@string/app_ops_use_bluetooth_volume</item>
-        <!-- OP_WAKE_LOCK -->
-        <item>@string/app_ops_keep_device_awake</item>
-        <!-- OP_MONITOR_LOCATION -->
-        <item>@string/app_ops_access_location</item>
-        <!-- OP_MONITOR_HIGH_POWER_LOCATION -->
-        <item>@string/app_ops_access_location</item>
-        <!-- OP_GET_USAGE_STATS -->
-        <item>@string/app_ops_get_usage_stats</item>
-        <!-- OP_MUTE_MICROPHONE -->
-        <item>@string/app_ops_mute_unmute_microphone</item>
-        <!-- OP_TOAST_WINDOW -->
-        <item>@string/app_ops_toast_window</item>
-        <!-- OP_PROJECT_MEDIA -->
-        <item>@string/app_ops_project_media</item>
-        <!-- OP_ACTIVATE_VPN -->
-        <item>@string/app_ops_activate_vpn</item>
-        <!-- OP_WRITE_WALLPAPER -->
-        <item>@string/app_ops_change_wallpaper</item>
-        <!-- OP_ASSIST_STRUCTURE -->
-        <item>@string/app_ops_assist_structure</item>
-        <!-- OP_ASSIST_SCREENSHOT -->
-        <item>@string/app_ops_assist_screenshot</item>
-        <!-- OP_READ_PHONE_STATE -->
-        <item>@string/app_ops_read_phone_state</item>
-        <!-- OP_ADD_VOICEMAIL -->
-        <item>@string/app_ops_add_voicemail</item>
-        <!-- OP_USE_SIP -->
-        <item>@string/app_ops_make_phone_call</item>
-        <!-- OP_PROCESS_OUTGOING_CALLS -->
-        <item>@string/app_ops_make_phone_call</item>
-        <!-- OP_USE_FINGERPRINT -->
-        <item>@string/app_ops_use_fingerprint</item>
-        <!-- OP_BODY_SENSORS -->
-        <item>@string/app_ops_use_body_sensors</item>
-        <!-- OP_READ_CELL_BROADCASTS -->
-        <item>@string/app_ops_read_cell_broadcasts</item>
-        <!-- OP_MOCK_LOCATION -->
-        <item>@string/app_ops_mock_location</item>
-        <!-- OP_READ_EXTERNAL_STORAGE -->
-        <item>@string/app_ops_read_external_storage</item>
-        <!-- OP_WRITE_EXTERNAL_STORAGE -->
-        <item>@string/app_ops_write_external_storage</item>
-        <!-- OP_TURN_SCREEN_ON -->
-        <item>@string/app_ops_turn_on_screen</item>
-        <!-- OP_GET_ACCOUNTS -->
-        <item>@string/app_ops_get_accounts</item>
-        <!-- OP_RUN_IN_BACKGROUND -->
-        <item>@string/app_ops_run_in_background</item>
-        <!-- OP_AUDIO_ACCESSIBILITY_VOLUME -->
-        <item>@string/app_ops_audio_accessibility_volume</item>
-        <!-- OP_READ_PHONE_NUMBERS -->
-        <item>@string/app_ops_read_phone_numbers</item>
-        <!-- OP_REQUEST_INSTALL_PACKAGES -->
-        <item>@string/app_ops_install_packages</item>
-        <!-- OP_PICTURE_IN_PICTURE -->
-        <item>@string/app_ops_picture_in_picture</item>
-        <!-- OP_INSTANT_APP_START_FOREGROUND -->
-        <item>@string/app_ops_app_start_foreground</item>
-        <!-- OP_ANSWER_PHONE_CALLS -->
-        <item>@string/app_ops_phone_calls</item>
-        <!-- OP_RUN_ANY_IN_BACKGROUND -->
-        <item>@string/app_ops_run_any_in_background</item>
-        <!-- OP_CHANGE_WIFI_STATE -->
-        <item>@string/app_ops_wifi_change</item>
-        <!-- OP_REQUEST_DELETE_PACKAGES -->
-        <item>@string/app_ops_request_delete_packages</item>
-        <!-- OP_BIND_ACCESSIBILITY_SERVICE -->
-        <item>@string/app_ops_bind_accessibility_service</item>
-        <!-- OP_ACCEPT_HANDOVER -->
-        <item>@string/app_ops_accept_handover</item>
-        <!-- OP_MANAGE_IPSEC_TUNNELS -->
-        <item>@string/app_ops_manage_ipsec_tunnels</item>
-        <!-- OP_START_FOREGROUND -->
-        <item>@string/app_ops_start_foreground</item>
-        <!-- OP_BLUETOOTH_SCAN -->
-        <item>@string/app_ops_bluetooth_scan</item>
-        <!-- OP_BLUETOOTH_CHANGE -->
-        <item>@string/app_ops_toggle_bluetooth</item>
-        <!-- OP_BOOT_COMPLETED -->
-        <item>@string/app_ops_start_at_bootup</item>
-        <!-- OP_NFC_CHANGE -->
-        <item>@string/app_ops_toggle_nfc</item>
-        <!-- OP_DATA_CONNECT_CHANGE -->
-        <item>@string/app_ops_toggle_mobile_data</item>
-    </string-array>
-
-</resources>
diff --git a/services/core/java/com/android/server/AppOpsService.java b/services/core/java/com/android/server/AppOpsService.java
index 1f377f6df00e..9dd1931b0831 100644
--- a/services/core/java/com/android/server/AppOpsService.java
+++ b/services/core/java/com/android/server/AppOpsService.java
@@ -1,7 +1,4 @@
 /*
- * Copyright (c) 2013-2014, The Linux Foundation. All rights reserved.
- * Not a Contribution.
- *
  * Copyright (C) 2012 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -25,12 +22,8 @@ import android.app.ActivityThread;
 import android.app.AppGlobals;
 import android.app.AppOpsManager;
 import android.app.AppOpsManagerInternal;
-import android.app.Dialog;
-import android.content.BroadcastReceiver;
 import android.content.ContentResolver;
 import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.IPackageManager;
 import android.content.pm.PackageManager;
@@ -44,8 +37,6 @@ import android.os.Binder;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.IBinder;
-import android.os.Looper;
-import android.os.PowerManager;
 import android.os.Process;
 import android.os.RemoteException;
 import android.os.ResultReceiver;
@@ -79,7 +70,6 @@ import com.android.internal.util.FastXmlSerializer;
 import com.android.internal.util.Preconditions;
 import com.android.internal.util.XmlUtils;
 import com.android.internal.util.function.pooled.PooledLambda;
-import com.android.server.PermissionDialogReqQueue.PermissionDialogReq;
 
 import libcore.util.EmptyArray;
 
@@ -180,16 +170,9 @@ public class AppOpsService extends IAppOpsService.Stub {
             "rc",       // UID_STATE_CACHED
     };
 
-    // Rate limiting thresholds for ask operations
-    public static final int RATE_LIMIT_OP_COUNT = 3;
-    public static final int RATE_LIMIT_OPS_TOTAL_PKG_COUNT = 4;
-    public static final int RATE_LIMIT_OP_DELAY_CEILING = 10;
-
     Context mContext;
     final AtomicFile mFile;
     final Handler mHandler;
-    final Looper mLooper;
-    private PowerManager mPowerManager;
 
     private final AppOpsManagerInternalImpl mAppOpsManagerInternal
             = new AppOpsManagerInternalImpl();
@@ -425,22 +408,15 @@ public class AppOpsService extends IAppOpsService.Stub {
         long rejectTime[] = new long[_NUM_UID_STATE];
         int startNesting;
         long startRealtime;
-        int noteOpCount;
-        int startOpCount;
-        PermissionDialogReqQueue dialogReqQueue;
-        final ArrayList<IBinder> clientTokens;
         public int allowedCount;
         public int ignoredCount;
-        int delayedCount;
 
-        Op(UidState _uidState, String _packageName, int _op, int _mode) {
+        Op(UidState _uidState, String _packageName, int _op) {
             uidState = _uidState;
             uid = _uidState.uid;
             packageName = _packageName;
             op = _op;
-            mode = _mode;
-            dialogReqQueue = new PermissionDialogReqQueue();
-            clientTokens = new ArrayList<IBinder>();
+            mode = AppOpsManager.opToDefaultMode(op);
         }
 
         boolean hasAnyTime() {
@@ -596,13 +572,6 @@ public class AppOpsService extends IAppOpsService.Stub {
                 }
                 mClients.remove(mAppToken);
             }
-
-            // We cannot broadcast on the synchronized block above because the broadcast might
-            // trigger another appop call that eventually arrives here from a different thread,
-            // causing a deadlock.
-            for (int i = mStartedOps.size() - 1; i >= 0; i--) {
-                broadcastOpIfNeeded(mStartedOps.get(i).op);
-            }
         }
     }
 
@@ -611,7 +580,6 @@ public class AppOpsService extends IAppOpsService.Stub {
         mFile = new AtomicFile(storagePath, "appops");
         mHandler = handler;
         mConstants = new Constants(mHandler);
-        mLooper = Looper.myLooper();
         readState();
     }
 
@@ -624,10 +592,6 @@ public class AppOpsService extends IAppOpsService.Stub {
     public void systemReady() {
         mConstants.startMonitoring(mContext.getContentResolver());
 
-        mPowerManager = mContext.getSystemService(PowerManager.class);
-        IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_OFF);
-        mContext.registerReceiver(mIntentReceiver, filter);
-
         synchronized (this) {
             boolean changed = false;
             for (int i = mUidStates.size() - 1; i >= 0; i--) {
@@ -728,37 +692,6 @@ public class AppOpsService extends IAppOpsService.Stub {
                 });
     }
 
-    private BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            String action = intent.getAction();
-            if (action.equals(Intent.ACTION_SCREEN_OFF)) {
-                synchronized (this) {
-                    for (int i = mUidStates.size() - 1; i >= 0; i--) {
-                        UidState uidState = mUidStates.valueAt(i);
-
-                        ArrayMap<String, Ops> packages = uidState.pkgOps;
-                        if (packages == null) {
-                            continue;
-                        }
-
-                        Iterator<Map.Entry<String, Ops>> it = packages.entrySet().iterator();
-                        while (it.hasNext()) {
-                            Map.Entry<String, Ops> ent = it.next();
-                            Ops pkgOps = ent.getValue();
-                            for (int j = pkgOps.size() - 1; j >= 0; j--) {
-                                Op curOp = pkgOps.valueAt(j);
-                                if (DEBUG) Slog.d(TAG, "Ignoring " + curOp.packageName + " request "
-                                        + curOp.op);
-                                curOp.dialogReqQueue.ignore();
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    };
-
     public void packageRemoved(int uid, String packageName) {
         synchronized (this) {
             UidState uidState = mUidStates.get(uid);
@@ -1066,8 +999,7 @@ public class AppOpsService extends IAppOpsService.Stub {
         code = AppOpsManager.opToSwitch(code);
 
         synchronized (this) {
-            final int defaultMode = AppOpsManager.opToDefaultMode(code,
-                    AppOpsManager.isStrictOp(code));
+            final int defaultMode = AppOpsManager.opToDefaultMode(code);
 
             UidState uidState = getUidStateLocked(uid, false);
             if (uidState == null) {
@@ -1641,7 +1573,6 @@ public class AppOpsService extends IAppOpsService.Stub {
 
     private int noteOperationUnchecked(int code, int uid, String packageName,
             int proxyUid, String proxyPackageName) {
-        PermissionDialogReq req = null;
         synchronized (this) {
             final Ops ops = getOpsRawLocked(uid, packageName, true /* edit */,
                     false /* uidMismatchExpected */);
@@ -1677,82 +1608,23 @@ public class AppOpsService extends IAppOpsService.Stub {
             } else {
                 final Op switchOp = switchCode != code ? getOpLocked(ops, switchCode, true) : op;
                 final int mode = switchOp.getMode();
-                if (mode != AppOpsManager.MODE_ALLOWED && mode != AppOpsManager.MODE_ASK) {
+                if (mode != AppOpsManager.MODE_ALLOWED) {
                     if (DEBUG) Slog.d(TAG, "noteOperation: reject #" + mode + " for code "
                             + switchCode + " (" + code + ") uid " + uid + " package "
                             + packageName);
                     op.rejectTime[uidState.state] = System.currentTimeMillis();
                     op.ignoredCount++;
                     return mode;
-                } else if (mode == AppOpsManager.MODE_ASK) {
-                    if (Looper.myLooper() == mLooper) {
-                        Slog.e(TAG, "noteOperation: this method will deadlock if called" +
-                               " from the main thread. (Code: " + code + " uid: " + uid +
-                               " package: " + packageName + ")");
-                        return mode;
-                    }
-
-                    if (DEBUG) {
-                            Slog.d(TAG, "Package " + op.packageName + " has " + op.noteOpCount
-                                    + " requests and " + op.startOpCount + " start requests with "
-                                    + op.ignoredCount + " ignored at " + op.time +
-                                    " with a duration of " + op.duration +
-                                    " while being delayed " + op.delayedCount + " times");
-                            Slog.d(TAG, "Total pkops for " + ops.packageName + " "
-                                    + ops.uidState.pkgOps.size());
-                    }
-
-                    // First drop all request events if the device is not interactive, next check
-                    // what the global pkg ops count for the package, then check op scoped count.
-                    // High frequency request ops will be delayed until their delay count ceiling
-                    // is met. This is to mitigate the overloading the main activity manager
-                    // service handler and having watchdog kill our service.
-                    // Google play services likes to share its uid with numerous packages to avoid
-                    // having to grant permissions from the users perspective and thus is the worst
-                    // example of overloading this queue -- so, to not encourage bad behavior,
-                    // we move them to the back of the line.
-                    // NOTE: these values are magic, and may need tuning. Ideally we'd want a
-                    // ringbuffer or token bucket here to do proper rate limiting.
-                    final boolean isInteractive = mPowerManager.isInteractive();
-                    if (isInteractive &&
-                            (ops.uidState.pkgOps.size() < RATE_LIMIT_OPS_TOTAL_PKG_COUNT
-                            && op.noteOpCount < RATE_LIMIT_OP_COUNT
-                            || op.delayedCount > RATE_LIMIT_OP_DELAY_CEILING)) {
-
-                        // Reset delayed count, most ops will never need this
-                        if (op.delayedCount > 0) {
-                            if (DEBUG) Slog.d(TAG, "Resetting delayed count for " + op.packageName);
-                            op.delayedCount = 0;
-                        }
-
-                        op.noteOpCount++;
-                        req = askOperationLocked(code, uid, packageName, switchOp);
-                    } else {
-                        if (isInteractive) {
-                            op.delayedCount++;
-                        }
-                        op.ignoredCount++;
-                        return AppOpsManager.MODE_IGNORED;
-                    }
                 }
             }
-            if (req == null) {
-                if (DEBUG) Slog.d(TAG, "noteOperation: allowing code " + code + " uid " + uid
-                        + " package " + packageName);
-                op.time[uidState.state] = System.currentTimeMillis();
-                op.rejectTime[uidState.state] = 0;
-                op.proxyUid = proxyUid;
-                op.proxyPackageName = proxyPackageName;
-                broadcastOpIfNeeded(code);
-                op.allowedCount++;
-                return AppOpsManager.MODE_ALLOWED;
-            }
-
+            if (DEBUG) Slog.d(TAG, "noteOperation: allowing code " + code + " uid " + uid
+                    + " package " + packageName);
+            op.time[uidState.state] = System.currentTimeMillis();
+            op.rejectTime[uidState.state] = 0;
+            op.proxyUid = proxyUid;
+            op.proxyPackageName = proxyPackageName;
+            return AppOpsManager.MODE_ALLOWED;
         }
-
-        int result = req.get();
-        broadcastOpIfNeeded(code);
-        return result;
     }
 
     @Override
@@ -1809,7 +1681,6 @@ public class AppOpsService extends IAppOpsService.Stub {
     @Override
     public int startOperation(IBinder token, int code, int uid, String packageName,
             boolean startIfModeDefault) {
-        final PermissionDialogReq req;
         verifyIncomingUid(uid);
         verifyIncomingOp(code);
         String resolvedPackageName = resolvePackageName(uid, packageName);
@@ -1832,7 +1703,6 @@ public class AppOpsService extends IAppOpsService.Stub {
             }
             final int switchCode = AppOpsManager.opToSwitch(code);
             final UidState uidState = ops.uidState;
-/*
             // If there is a non-default per UID policy (we set UID op mode only if
             // non-default) it takes over, otherwise use the per package policy.
             if (uidState.opModes != null && uidState.opModes.indexOfKey(switchCode) >= 0) {
@@ -1846,21 +1716,9 @@ public class AppOpsService extends IAppOpsService.Stub {
                     return uidMode;
                 }
             } else {
-*/
-            if (uidState.opModes != null) {
-                final int uidMode = uidState.opModes.get(switchCode);
-                if (uidMode != AppOpsManager.MODE_ALLOWED) {
-                    if (DEBUG) Slog.d(TAG, "noteOperation: reject #" + op.mode + " for code "
-                            + switchCode + " (" + code + ") uid " + uid + " package "
-                            + resolvedPackageName);
-                    op.rejectTime[uidState.state] = System.currentTimeMillis();
-                    return uidMode;
-                }
-            }
-
                 final Op switchOp = switchCode != code ? getOpLocked(ops, switchCode, true) : op;
                 final int mode = switchOp.getMode();
-                if (mode != AppOpsManager.MODE_ALLOWED && mode != AppOpsManager.MODE_ASK
+                if (mode != AppOpsManager.MODE_ALLOWED
                         && (!startIfModeDefault || mode != AppOpsManager.MODE_DEFAULT)) {
                     if (DEBUG) Slog.d(TAG, "startOperation: reject #" + mode + " for code "
                             + switchCode + " (" + code + ") uid " + uid + " package "
@@ -1868,42 +1726,25 @@ public class AppOpsService extends IAppOpsService.Stub {
                     op.rejectTime[uidState.state] = System.currentTimeMillis();
                     op.ignoredCount++;
                     return mode;
-                } else if (mode == AppOpsManager.MODE_ALLOWED) {
-                    if (DEBUG) Slog.d(TAG, "startOperation: allowing code " + code + " uid " + uid
-                            + " package " + resolvedPackageName);
-                    if (op.startNesting == 0) {
-                        op.startRealtime = SystemClock.elapsedRealtime();
-                        op.time[uidState.state] = System.currentTimeMillis();
-                        op.rejectTime[uidState.state] = 0;
-                        op.duration = -1;
-                        op.allowedCount++;
-//                        scheduleOpActiveChangedIfNeededLocked(code, uid, packageName, true);
-                    }
-                    op.startNesting++;
-                    uidState.startNesting++;
-                    if (client.mStartedOps != null) {
-                        client.mStartedOps.add(op);
-                    }
-                    broadcastOpIfNeeded(code);
-                    return AppOpsManager.MODE_ALLOWED;
-                } else {
-                    if (Looper.myLooper() == mLooper) {
-                        Slog.e(TAG, "startOperation: this method will deadlock if called" +
-                                " from the main thread. (Code: " + code + " uid: " + uid +
-                                " package: " + resolvedPackageName + ")");
-                        return mode;
-                    }
-                    op.startOpCount++;
-                    IBinder clientToken = client.mAppToken;
-                    op.clientTokens.add(clientToken);
-                    req = askOperationLocked(code, uid, resolvedPackageName, switchOp);
                 }
             }
+            if (DEBUG) Slog.d(TAG, "startOperation: allowing code " + code + " uid " + uid
+                    + " package " + resolvedPackageName);
+            if (op.startNesting == 0) {
+                op.startRealtime = SystemClock.elapsedRealtime();
+                op.time[uidState.state] = System.currentTimeMillis();
+                op.rejectTime[uidState.state] = 0;
+                op.duration = -1;
+                scheduleOpActiveChangedIfNeededLocked(code, uid, packageName, true);
+            }
+            op.startNesting++;
+            uidState.startNesting++;
+            if (client.mStartedOps != null) {
+                client.mStartedOps.add(op);
+            }
+        }
 
-            int result = req.get();
-            broadcastOpIfNeeded(code);
-            return result;
-//        }
+        return AppOpsManager.MODE_ALLOWED;
     }
 
     @Override
@@ -1995,7 +1836,6 @@ public class AppOpsService extends IAppOpsService.Stub {
         } finally {
             Binder.restoreCallingIdentity(identity);
         }
-        broadcastOpIfNeeded(code);
     }
 
     @Override
@@ -2027,10 +1867,6 @@ public class AppOpsService extends IAppOpsService.Stub {
     }
 
     private void verifyIncomingUid(int uid) {
-        if (Binder.getCallingUid() == 0) {
-            // Allow root to delegate uid operations.
-            return;
-        }
         if (uid == Binder.getCallingUid()) {
             return;
         }
@@ -2202,14 +2038,12 @@ public class AppOpsService extends IAppOpsService.Stub {
     }
 
     private Op getOpLocked(Ops ops, int code, boolean edit) {
-        int mode;
         Op op = ops.get(code);
         if (op == null) {
             if (!edit) {
                 return null;
             }
-            mode = AppOpsManager.opToDefaultMode(code);
-            op = new Op(ops.uidState, ops.packageName, code, mode);
+            op = new Op(ops.uidState, ops.packageName, code);
             ops.put(code, op);
         }
         if (edit) {
@@ -2344,7 +2178,7 @@ public class AppOpsService extends IAppOpsService.Stub {
                     final Op op = ops.get(AppOpsManager.OP_RUN_IN_BACKGROUND);
                     if (op != null && op.mode != AppOpsManager.opToDefaultMode(op.op)) {
                         final Op copy = new Op(op.uidState, op.packageName,
-                                AppOpsManager.OP_RUN_ANY_IN_BACKGROUND, AppOpsManager.MODE_ALLOWED);
+                                AppOpsManager.OP_RUN_ANY_IN_BACKGROUND);
                         copy.mode = op.mode;
                         ops.put(AppOpsManager.OP_RUN_ANY_IN_BACKGROUND, copy);
                         changed = true;
@@ -2462,7 +2296,8 @@ public class AppOpsService extends IAppOpsService.Stub {
                     uidState.pkgOps = new ArrayMap<>();
                 }
 
-                int code = Integer.parseInt(parser.getAttributeValue(null, "n"));
+                int code = Integer
+                        .parseInt(parser.getAttributeValue(null, "n"));
                 // use op name string if it exists
                 String codeNameStr = parser.getAttributeValue(null, "ns");
                 if (codeNameStr != null) {
@@ -2470,38 +2305,18 @@ public class AppOpsService extends IAppOpsService.Stub {
                     code = AppOpsManager.nameToOp(codeNameStr);
                 }
                 // skip op codes that are out of bounds
-                if (code == AppOpsManager.OP_NONE || code >= AppOpsManager._NUM_OP) {
+                if (code == AppOpsManager.OP_NONE
+                        || code >= AppOpsManager._NUM_OP) {
                     continue;
                 }
-
-                Op op = new Op(uidState, pkgName, code, AppOpsManager.MODE_ERRORED);
-
-                String mode = parser.getAttributeValue(null, "m");
-                if (mode != null) {
-                    op.mode = Integer.parseInt(mode);
-                } else {
-                    String defaultMode = parser.getAttributeValue(null, "dm");
-                    if (defaultMode != null) {
-                        op.mode = Integer.parseInt(defaultMode);
-                    } else {
-                        op.mode = AppOpsManager.opToDefaultMode(code);
-                    }
-                }
+                Op op = new Op(uidState, pkgName, code);
 
                 for (int i = parser.getAttributeCount()-1; i >= 0; i--) {
                     final String name = parser.getAttributeName(i);
                     final String value = parser.getAttributeValue(i);
                     switch (name) {
-                        case "ac":
-                            op.allowedCount = Integer.parseInt(value);
-                            break;
-                        case "ic":
-                            op.ignoredCount = Integer.parseInt(value);
-                            break;
-                        case "dm":
                         case "m":
-                        case "n":
-                        case "ns":
+                            op.mode = Integer.parseInt(value);
                             break;
                         case "d":
                             op.duration = Integer.parseInt(value);
@@ -2512,6 +2327,12 @@ public class AppOpsService extends IAppOpsService.Stub {
                         case "pp":
                             op.proxyPackageName = value;
                             break;
+                        case "ac":
+                            op.allowedCount = Integer.parseInt(value);
+                            break;
+                        case "ic":
+                            op.ignoredCount = Integer.parseInt(value);
+                            break;
                         case "tp":
                             op.time[AppOpsManager.UID_STATE_PERSISTENT] = Long.parseLong(value);
                             break;
@@ -2656,11 +2477,8 @@ public class AppOpsService extends IAppOpsService.Stub {
                             out.startTag(null, "op");
                             out.attribute(null, "n", Integer.toString(op.getOp()));
                             out.attribute(null, "ns", AppOpsManager.opToName(op.getOp()));
-                            int defaultMode = AppOpsManager.opToDefaultMode(op.getOp());
-                            if (op.getMode() != defaultMode) {
+                            if (op.getMode() != AppOpsManager.opToDefaultMode(op.getOp())) {
                                 out.attribute(null, "m", Integer.toString(op.getMode()));
-                            } else {
-                                out.attribute(null, "dm", Integer.toString(defaultMode));
                             }
                             for (int k = 0; k < _NUM_UID_STATE; k++) {
                                 final long time = op.getLastTimeFor(k);
@@ -3788,152 +3606,6 @@ public class AppOpsService extends IAppOpsService.Stub {
         }
     }
 
-    final class AskRunnable implements Runnable {
-        final int code;
-        final int uid;
-        final String packageName;
-        final Op op;
-        final PermissionDialogReq request;
-
-        public AskRunnable(int code, int uid, String packageName, Op op,
-                PermissionDialogReq request) {
-            super();
-            this.code = code;
-            this.uid = uid;
-            this.packageName = packageName;
-            this.op = op;
-            this.request = request;
-        }
-
-        @Override
-        public void run() {
-            PermissionDialog permDialog = null;
-            synchronized (AppOpsService.this) {
-                Slog.e(TAG, "Creating dialog box");
-                op.dialogReqQueue.register(request);
-                if (op.dialogReqQueue.getDialog() == null) {
-                    permDialog = new PermissionDialog(mContext,
-                            AppOpsService.this, code, uid, packageName);
-                    op.dialogReqQueue.setDialog(permDialog);
-                }
-            }
-            if (permDialog != null) {
-                permDialog.show();
-            }
-        }
-    }
-
-    private PermissionDialogReq askOperationLocked(int code, int uid, String packageName, Op op) {
-        PermissionDialogReq request = new PermissionDialogReq();
-        mHandler.post(new AskRunnable(code, uid, packageName, op, request));
-        return request;
-    }
-
-    private void printOperationLocked(Op op, int mode, String operation) {
-        if (op != null) {
-            int switchCode = AppOpsManager.opToSwitch(op.op);
-            if (mode == AppOpsManager.MODE_IGNORED) {
-                if (DEBUG) Slog.d(TAG, operation + ": reject #" + mode + " for code "
-                        + switchCode + " (" + op.op + ") uid " + op.uid + " package "
-                        + op.packageName);
-            } else if (mode == AppOpsManager.MODE_ALLOWED) {
-                if (DEBUG) Slog.d(TAG, operation + ": allowing code " + op.op + " uid "
-                    + op.uid + " package " + op.packageName);
-            }
-        }
-    }
-
-    private void recordOperationLocked(int code, int uid, String packageName, int mode) {
-        Op op = getOpLocked(code, uid, packageName, false);
-        UidState uidState = getUidStateLocked(uid, false);
-        if (op != null && uidState != null) {
-            if (op.noteOpCount != 0) {
-                printOperationLocked(op, mode, "noteOperartion");
-            }
-            if (op.startOpCount != 0) {
-                printOperationLocked(op, mode, "startOperation");
-            }
-            if (mode == AppOpsManager.MODE_IGNORED) {
-                op.rejectTime[uidState.state] = System.currentTimeMillis();
-            } else if (mode == AppOpsManager.MODE_ALLOWED) {
-                if (op.noteOpCount != 0) {
-                    op.time[uidState.state] = System.currentTimeMillis();
-                    op.rejectTime[uidState.state] = 0;
-                }
-                if (op.startOpCount != 0) {
-                    if (op.startNesting == 0) {
-                        op.time[uidState.state] = System.currentTimeMillis();
-                        op.rejectTime[uidState.state] = 0;
-                        op.duration = -1;
-                    }
-                    op.startNesting = op.startNesting + op.startOpCount;
-                    while (op.clientTokens.size() != 0) {
-                        IBinder clientToken = op.clientTokens.get(0);
-                        ClientState client = mClients.get(clientToken);
-                        if (client != null) {
-                            if (client.mStartedOps != null) {
-                                client.mStartedOps.add(op);
-                            }
-                        }
-                        op.clientTokens.remove(0);
-                    }
-                }
-            }
-            op.clientTokens.clear();
-            op.startOpCount = 0;
-            op.noteOpCount = 0;
-        }
-    }
-
-    public void notifyOperation(int code, int uid, String packageName, int mode, boolean remember) {
-        verifyIncomingUid(uid);
-        verifyIncomingOp(code);
-        ArrayList<ModeCallback> repCbs = null;
-        int switchCode = AppOpsManager.opToSwitch(code);
-        synchronized (this) {
-            recordOperationLocked(code, uid, packageName, mode);
-            Op op = getOpLocked(switchCode, uid, packageName, true);
-            if (op != null) {
-                // Send result to all waiting client
-                if (op.dialogReqQueue.getDialog() != null) {
-                    op.dialogReqQueue.notifyAll(mode);
-                    op.dialogReqQueue.setDialog(null);
-                }
-                if (remember && op.mode != mode) {
-                    op.mode = mode;
-                    ArraySet<ModeCallback> cbs = mOpModeWatchers.get(switchCode);
-                    if (cbs != null) {
-                        if (repCbs == null) {
-                            repCbs = new ArrayList<ModeCallback>();
-                        }
-                        repCbs.addAll(cbs);
-                    }
-                    cbs = mPackageModeWatchers.get(packageName);
-                    if (cbs != null) {
-                        if (repCbs == null) {
-                            repCbs = new ArrayList<ModeCallback>();
-                        }
-                        repCbs.addAll(cbs);
-                    }
-                    if (mode == AppOpsManager.opToDefaultMode(op.op)) {
-                        // If going into the default mode, prune this op
-                        // if there is nothing else interesting in it.
-                        pruneOp(op, uid, packageName);
-                    }
-                    scheduleWriteLocked();
-                }
-            }
-        }
-        if (repCbs != null) {
-            for (int i = 0; i < repCbs.size(); i++) {
-                try {
-                    repCbs.get(i).mCallback.opChanged(switchCode, uid, packageName);
-                } catch (RemoteException e) {
-                }
-            }
-        }
-    }
-
     private static String resolvePackageName(int uid, String packageName)  {
         if (uid == Process.ROOT_UID) {
             return "root";
@@ -4145,48 +3817,17 @@ public class AppOpsService extends IAppOpsService.Stub {
         }
     }
 
-    private void broadcastOpIfNeeded(int op) {
-        switch (op) {
-            default:
-                break;
-        }
-    }
-
-    @Override
-    public boolean getPrivacyGuardSettingForPackage(int uid, String packageName) {
-        for (int op : AppOpsManager.PRIVACY_GUARD_OP_STATES) {
-            int switchOp = AppOpsManager.opToSwitch(op);
-            int mode = checkOperation(op, uid, packageName);
-            if (mode != AppOpsManager.MODE_ALLOWED && mode != AppOpsManager.MODE_IGNORED) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    @Override
-    public void setPrivacyGuardSettingForPackage(int uid, String packageName, boolean state) {
-        for (int op : AppOpsManager.PRIVACY_GUARD_OP_STATES) {
-            int switchOp = AppOpsManager.opToSwitch(op);
-            setMode(switchOp, uid, packageName, state
-                    ? AppOpsManager.MODE_ASK : AppOpsManager.MODE_ALLOWED);
-        }
-    }
-
     @Override
     public void resetCounters() {
         mContext.enforcePermission(android.Manifest.permission.UPDATE_APP_OPS_STATS,
                 Binder.getCallingPid(), Binder.getCallingUid(), null);
         synchronized (this) {
-            for (int i = 0; i < mUidStates.size(); i++) {
+            for (int i=0; i<mUidStates.size(); i++) {
                 final UidState uidState = mUidStates.valueAt(i);
-                if (uidState.pkgOps == null) {
-                    continue;
-                }
                 for (Map.Entry<String, Ops> ent : uidState.pkgOps.entrySet()) {
                     String packageName = ent.getKey();
                     Ops pkgOps = ent.getValue();
-                    for (int j = 0; j < pkgOps.size(); j++) {
+                    for (int j=0; j<pkgOps.size(); j++) {
                         Op curOp = pkgOps.valueAt(j);
                         curOp.allowedCount = 0;
                         curOp.ignoredCount = 0;
diff --git a/services/core/java/com/android/server/BasePermissionDialog.java b/services/core/java/com/android/server/BasePermissionDialog.java
deleted file mode 100644
index e3dbcdabcd1c..000000000000
--- a/services/core/java/com/android/server/BasePermissionDialog.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Copyright (c) 2013, The Linux Foundation. All rights reserved.
- * Not a Contribution.
- *
- * Copyright (C) 2006 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.server;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.os.Handler;
-import android.os.Message;
-import android.view.KeyEvent;
-import android.view.WindowManager;
-import android.widget.Button;
-
-import com.android.internal.R;
-
-public class BasePermissionDialog extends AlertDialog {
-    public BasePermissionDialog(Context context) {
-        super(context, com.android.internal.R.style.Theme_Dialog_AppError);
-        getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);
-        getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM,
-                WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
-        WindowManager.LayoutParams attrs = getWindow().getAttributes();
-        attrs.setTitle("Permission Dialog");
-        getWindow().setAttributes(attrs);
-        setIconAttribute(R.attr.alertDialogIcon);
-    }
-
-    public void onStart() {
-        super.onStart();
-        setEnabled(false);
-        mHandler.sendMessage(mHandler.obtainMessage(0));
-    }
-
-    public boolean dispatchKeyEvent(KeyEvent event) {
-        if (mConsuming) {
-            // Slog.i(TAG, "Consuming: " + event);
-            return true;
-        }
-        // Slog.i(TAG, "Dispatching: " + event);
-        return super.dispatchKeyEvent(event);
-    }
-
-    private void setEnabled(boolean enabled) {
-        Button b = (Button) findViewById(R.id.button1);
-        if (b != null) {
-            b.setEnabled(enabled);
-        }
-        b = (Button) findViewById(R.id.button2);
-        if (b != null) {
-            b.setEnabled(enabled);
-        }
-        b = (Button) findViewById(R.id.button3);
-        if (b != null) {
-            b.setEnabled(enabled);
-        }
-    }
-
-    private Handler mHandler = new Handler() {
-        public void handleMessage(Message msg) {
-            if (msg.what == 0) {
-                mConsuming = false;
-                setEnabled(true);
-            }
-        }
-    };
-
-    private boolean mConsuming = true;
-}
diff --git a/services/core/java/com/android/server/BluetoothManagerService.java b/services/core/java/com/android/server/BluetoothManagerService.java
index bb9e15652baa..35cae9d731cb 100644
--- a/services/core/java/com/android/server/BluetoothManagerService.java
+++ b/services/core/java/com/android/server/BluetoothManagerService.java
@@ -1,7 +1,4 @@
 /*
- * Copyright (c) 2013-2014, The Linux Foundation. All rights reserved.
- * Not a Contribution.
- *
  * Copyright (C) 2012 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -22,7 +19,6 @@ package com.android.server;
 import android.Manifest;
 import android.app.ActivityManager;
 import android.app.AppGlobals;
-import android.app.AppOpsManager;
 import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothProfile;
 import android.bluetooth.BluetoothProtoEnums;
@@ -900,12 +896,6 @@ class BluetoothManagerService extends IBluetoothManager.Stub {
                     + mBinding + " mState = " + BluetoothAdapter.nameForState(mState));
         }
 
-        AppOpsManager appOps = mContext.getSystemService(AppOpsManager.class);
-        if (appOps.noteOp(AppOpsManager.OP_BLUETOOTH_CHANGE, callingUid,
-                packageName) != AppOpsManager.MODE_ALLOWED) {
-            return false;
-        }
-
         synchronized (mReceiver) {
             mQuietEnableExternal = false;
             mEnableExternal = true;
diff --git a/services/core/java/com/android/server/PermissionDialog.java b/services/core/java/com/android/server/PermissionDialog.java
deleted file mode 100644
index fd676b5f8935..000000000000
--- a/services/core/java/com/android/server/PermissionDialog.java
+++ /dev/null
@@ -1,145 +0,0 @@
-/*
- * Copyright (c) 2013, The Linux Foundation. All rights reserved.
- * Not a Contribution.
- *
- * Copyright (C) 2006 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.server;
-
-import android.app.AppOpsManager;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.PackageManager.NameNotFoundException;
-import android.content.res.Resources;
-import android.os.Handler;
-import android.os.Message;
-import android.view.View;
-import android.view.WindowManager;
-import android.widget.CheckBox;
-import android.widget.TextView;
-
-public class PermissionDialog extends BasePermissionDialog {
-    private final static String TAG = "PermissionDialog";
-
-    private final AppOpsService mService;
-    private final String mPackageName;
-    private final int mCode;
-    private View  mView;
-    private CheckBox mChoice;
-    private int mUid;
-    final CharSequence[] mOpLabels;
-    private Context mContext;
-
-    // Event 'what' codes
-    static final int ACTION_ALLOWED = 0x2;
-    static final int ACTION_IGNORED = 0x4;
-    static final int ACTION_IGNORED_TIMEOUT = 0x8;
-
-    // 15s timeout, then we automatically dismiss the permission
-    // dialog. Otherwise, it may cause watchdog timeout sometimes.
-    static final long DISMISS_TIMEOUT = 1000 * 15 * 1;
-
-    public PermissionDialog(Context context, AppOpsService service,
-            int code, int uid, String packageName) {
-        super(context);
-
-        mContext = context;
-        Resources res = context.getResources();
-
-        mService = service;
-        mCode = code;
-        mPackageName = packageName;
-        mUid = uid;
-        mOpLabels = res.getTextArray(
-            com.android.internal.R.array.app_ops_labels);
-
-        setCancelable(false);
-
-        setButton(DialogInterface.BUTTON_POSITIVE,
-                  res.getString(com.android.internal.R.string.allow), mHandler.obtainMessage(ACTION_ALLOWED));
-
-        setButton(DialogInterface.BUTTON_NEGATIVE,
-                    res.getString(com.android.internal.R.string.deny), mHandler.obtainMessage(ACTION_IGNORED));
-
-        setTitle(res.getString(com.android.internal.R.string.privacy_guard_dialog_title));
-        WindowManager.LayoutParams attrs = getWindow().getAttributes();
-        attrs.setTitle("Permission info: " + getAppName(mPackageName));
-        attrs.privateFlags |= WindowManager.LayoutParams.PRIVATE_FLAG_SYSTEM_ERROR
-                | WindowManager.LayoutParams.PRIVATE_FLAG_SHOW_FOR_ALL_USERS;
-        getWindow().setAttributes(attrs);
-
-        mView = getLayoutInflater().inflate(
-             com.android.internal.R.layout.permission_confirmation_dialog,
-             null);
-        TextView tv = (TextView) mView.findViewById(
-            com.android.internal.R.id.permission_text);
-        mChoice = (CheckBox) mView.findViewById(
-            com.android.internal.R.id.permission_remember_choice_checkbox);
-        String name = getAppName(mPackageName);
-        if(name == null)
-            name = mPackageName;
-        tv.setText(mContext.getString(com.android.internal.R.string.privacy_guard_dialog_summary,
-                name, mOpLabels[mCode]));
-        setView(mView);
-
-        // After the timeout, pretend the user clicked the quit button
-        mHandler.sendMessageDelayed(
-                mHandler.obtainMessage(ACTION_IGNORED_TIMEOUT), DISMISS_TIMEOUT);
-    }
-
-    public void ignore() {
-        mHandler.sendMessage(mHandler.obtainMessage(ACTION_IGNORED_TIMEOUT));
-    }
-
-    private String getAppName(String packageName) {
-        ApplicationInfo appInfo = null;
-        PackageManager pm = mContext.getPackageManager();
-        try {
-            appInfo = pm.getApplicationInfo(packageName,
-                      PackageManager.GET_DISABLED_COMPONENTS
-                      | PackageManager.GET_UNINSTALLED_PACKAGES);
-        } catch (final NameNotFoundException e) {
-            return null;
-        }
-        if(appInfo != null) {
-            return  (String)pm.getApplicationLabel(appInfo);
-        }
-        return null;
-    }
-
-    private final Handler mHandler = new Handler() {
-        public void handleMessage(Message msg) {
-            int mode;
-            boolean remember = mChoice.isChecked();
-            switch(msg.what) {
-                case ACTION_ALLOWED:
-                    mode = AppOpsManager.MODE_ALLOWED;
-                    break;
-                case ACTION_IGNORED:
-                    mode = AppOpsManager.MODE_IGNORED;
-                    break;
-                default:
-                    mode = AppOpsManager.MODE_IGNORED;
-                    remember = false;
-            }
-            mService.notifyOperation(mCode, mUid, mPackageName, mode,
-                remember);
-            dismiss();
-        }
-    };
-}
diff --git a/services/core/java/com/android/server/PermissionDialogReqQueue.java b/services/core/java/com/android/server/PermissionDialogReqQueue.java
deleted file mode 100644
index 5b602e33a607..000000000000
--- a/services/core/java/com/android/server/PermissionDialogReqQueue.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Copyright (c) 2013, The Linux Foundation. All rights reserved.
- * Not a Contribution.
- *
- * Copyright (C) 2006 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.server;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class PermissionDialogReqQueue {
-    public PermissionDialog getDialog() {
-        return mDialog;
-    }
-
-    public void setDialog(PermissionDialog mDialog) {
-        this.mDialog = mDialog;
-    }
-
-    public final static class PermissionDialogReq {
-        public void set(int res) {
-            synchronized (this) {
-                mHasResult = true;
-                mResult = res;
-                notifyAll();
-            }
-        }
-
-        public int get() {
-            synchronized (this) {
-                while (!mHasResult) {
-                    try {
-                        wait();
-                    } catch (InterruptedException e) {
-                    }
-                }
-            }
-            return mResult;
-        }
-
-        boolean mHasResult = false;
-        int mResult;
-    }
-
-    private PermissionDialog mDialog;
-    private List<PermissionDialogReq> resultList;
-
-    public PermissionDialogReqQueue() {
-        mDialog = null;
-        resultList = new ArrayList<PermissionDialogReq>();
-    }
-
-    public void register(PermissionDialogReq res) {
-        synchronized (this) {
-            resultList.add(res);
-        }
-    }
-
-    public void notifyAll(int mode) {
-        synchronized (this) {
-            while (resultList.size() != 0) {
-                PermissionDialogReq res = resultList.get(0);
-                res.set(mode);
-                resultList.remove(0);
-            }
-        }
-    }
-
-    public void ignore() {
-        if (mDialog != null) {
-            mDialog.ignore();
-        }
-    }
-}
diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java
index 55def1a380cc..6e1949ecd8d5 100644
--- a/services/core/java/com/android/server/am/ActivityManagerService.java
+++ b/services/core/java/com/android/server/am/ActivityManagerService.java
@@ -1950,9 +1950,6 @@ public class ActivityManagerService extends IActivityManager.Stub
     static final int DISPATCH_OOM_ADJ_OBSERVER_MSG = 70;
     static final int CONTENT_PROVIDER_WAIT_TIMEOUT_MSG = 71;
 
-    static final int POST_PRIVACY_NOTIFICATION_MSG = 90;
-    static final int CANCEL_PRIVACY_NOTIFICATION_MSG = 91;
-
     static final int FIRST_ACTIVITY_STACK_MSG = 100;
     static final int FIRST_BROADCAST_QUEUE_MSG = 200;
     static final int FIRST_COMPAT_MODE_MSG = 300;
@@ -2593,67 +2590,6 @@ public class ActivityManagerService extends IActivityManager.Stub
                 // it is finished we make sure it is reset to its default.
                 mUserIsMonkey = false;
             } break;
-            case POST_PRIVACY_NOTIFICATION_MSG: {
-                INotificationManager inm = NotificationManager.getService();
-                if (inm == null) {
-                    return;
-                }
-
-                ActivityRecord root = (ActivityRecord) msg.obj;
-                ProcessRecord process = root.app;
-                if (process == null) {
-                    return;
-                }
-
-                try {
-                    Context context = mContext.createPackageContext(process.info.packageName, 0);
-                    String text = mContext.getString(R.string.privacy_guard_notification_detail,
-                            context.getApplicationInfo().loadLabel(context.getPackageManager()));
-                    String title = mContext.getString(R.string.privacy_guard_notification);
-
-                    Intent infoIntent = new Intent(Settings.ACTION_APP_OPS_DETAILS_SETTINGS,
-                            Uri.fromParts("package", root.packageName, null));
-
-                    Notification.Builder builder = new Notification.Builder(mContext,
-                            SystemNotificationChannels.SECURITY);
-                    builder.setSmallIcon(com.android.internal.R.drawable.stat_notify_privacy_guard)
-                            .setOngoing(true)
-                            .setPriority(Notification.PRIORITY_LOW)
-                            .setContentTitle(title)
-                            .setContentText(text)
-                            .setContentIntent(PendingIntent.getActivityAsUser(mContext, 0,
-                                    infoIntent, PendingIntent.FLAG_CANCEL_CURRENT, null,
-                                    new UserHandle(root.userId)));
-                    Notification notification = builder.build();
-
-                    try {
-                        int[] outId = new int[1];
-                        inm.enqueueNotificationWithTag("android", "android", null,
-                                R.string.privacy_guard_notification,
-                                notification, root.userId);
-                    } catch (RuntimeException e) {
-                        Slog.w(ActivityManagerService.TAG,
-                                "Error showing notification for privacy guard", e);
-                    } catch (RemoteException e) {
-                    }
-                } catch (NameNotFoundException e) {
-                    Slog.w(TAG, "Unable to create context for privacy guard notification", e);
-                }
-            } break;
-            case CANCEL_PRIVACY_NOTIFICATION_MSG: {
-                INotificationManager inm = NotificationManager.getService();
-                if (inm == null) {
-                    return;
-                }
-                try {
-                    inm.cancelNotificationWithTag("android", null,
-                            R.string.privacy_guard_notification,  msg.arg1);
-                } catch (RuntimeException e) {
-                    Slog.w(ActivityManagerService.TAG,
-                            "Error canceling notification for service", e);
-                } catch (RemoteException e) {
-                }
-            } break;
             case IDLE_UIDS_MSG: {
                 idleUids();
             } break;
diff --git a/services/core/java/com/android/server/am/ActivityRecord.java b/services/core/java/com/android/server/am/ActivityRecord.java
index d114e5ae4299..9cbe8099f2ae 100644
--- a/services/core/java/com/android/server/am/ActivityRecord.java
+++ b/services/core/java/com/android/server/am/ActivityRecord.java
@@ -1914,33 +1914,6 @@ final class ActivityRecord extends ConfigurationContainer implements AppWindowCo
             // pause and then resume again later, which will result in a double life-cycle event.
             stack.checkReadyForSleep();
         }
-
-        updatePrivacyGuardNotificationLocked();
-    }
-
-    private final void updatePrivacyGuardNotificationLocked() {
-        String privacyGuardPackageName = mStackSupervisor.mPrivacyGuardPackageName;
-        if (privacyGuardPackageName != null && privacyGuardPackageName.equals(this.packageName)) {
-            return;
-        }
-
-        boolean privacy = service.mAppOpsService.getPrivacyGuardSettingForPackage(
-                this.app.uid, this.packageName);
-        boolean privacyNotification = (Settings.Secure.getInt(
-                service.mContext.getContentResolver(),
-                Settings.Secure.PRIVACY_GUARD_NOTIFICATION, 1) == 1);
-
-        if (privacyGuardPackageName != null && !privacy) {
-            Message msg = service.mHandler.obtainMessage(
-                    ActivityManagerService.CANCEL_PRIVACY_NOTIFICATION_MSG, this.userId);
-            msg.sendToTarget();
-            mStackSupervisor.mPrivacyGuardPackageName = null;
-        } else if (privacy && privacyNotification) {
-            Message msg = service.mHandler.obtainMessage(
-                    ActivityManagerService.POST_PRIVACY_NOTIFICATION_MSG, this);
-            msg.sendToTarget();
-            mStackSupervisor.mPrivacyGuardPackageName = this.packageName;
-        }
     }
 
     final void activityStoppedLocked(Bundle newIcicle, PersistableBundle newPersistentState,
diff --git a/services/core/java/com/android/server/am/ActivityStackSupervisor.java b/services/core/java/com/android/server/am/ActivityStackSupervisor.java
index a5a96dcdbf53..d1ba74704259 100644
--- a/services/core/java/com/android/server/am/ActivityStackSupervisor.java
+++ b/services/core/java/com/android/server/am/ActivityStackSupervisor.java
@@ -395,11 +395,6 @@ public class ActivityStackSupervisor extends ConfigurationContainer implements D
     /** Set when a power hint has started, but not ended. */
     private boolean mPowerHintSent;
 
-    /**
-     * Is the privacy guard currently enabled? Shared between ActivityStacks
-     */
-    String mPrivacyGuardPackageName = null;
-
     /**
      * We don't want to allow the device to go to sleep while in the process
      * of launching an activity.  This is primarily to allow alarm intent
diff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java
index cca983908846..2c0ec3abfe37 100644
--- a/services/core/java/com/android/server/pm/PackageManagerService.java
+++ b/services/core/java/com/android/server/pm/PackageManagerService.java
@@ -1240,8 +1240,6 @@ public class PackageManagerService extends IPackageManager.Stub
 
     ArrayList<ComponentName> mDisabledComponentsList;
 
-    private AppOpsManager mAppOps;
-
     // Set of pending broadcasts for aggregating enable/disable of components.
     static class PendingPackageBroadcasts {
         // for each user id, a map of <package name -> components within that package>
@@ -2163,18 +2161,6 @@ public class PackageManagerService extends IPackageManager.Stub
                 notifyPackageAdded(packageName);
             }
 
-            if (!update && !isSystemApp(res.pkg)) {
-                boolean privacyGuard =
-                        android.provider.Settings.Secure.getIntForUser(
-                        mContext.getContentResolver(),
-                        android.provider.Settings.Secure.PRIVACY_GUARD_DEFAULT,
-                        0, UserHandle.USER_CURRENT) == 1;
-                if (privacyGuard) {
-                    mAppOps.setPrivacyGuardSettingForPackage(res.pkg.applicationInfo.uid,
-                            res.pkg.applicationInfo.packageName, true);
-                }
-            }
-
             // Log current value of "unknown sources" setting
             EventLog.writeEvent(EventLogTags.UNKNOWN_SOURCES_ENABLED,
                     getUnknownSourcesSettings());
@@ -2477,8 +2463,6 @@ public class PackageManagerService extends IPackageManager.Stub
         mSettings.addSharedUserLPw("android.uid.se", SE_UID,
                 ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
 
-        mAppOps = context.getSystemService(AppOpsManager.class);
-
         String separateProcesses = SystemProperties.get("debug.separate_processes");
         if (separateProcesses != null && separateProcesses.length() > 0) {
             if ("*".equals(separateProcesses)) {
diff --git a/telephony/java/android/telephony/TelephonyManager.java b/telephony/java/android/telephony/TelephonyManager.java
index a21e57d1c0c8..3e178d19de50 100644
--- a/telephony/java/android/telephony/TelephonyManager.java
+++ b/telephony/java/android/telephony/TelephonyManager.java
@@ -1,7 +1,4 @@
 /*
- * Copyright (c) 2014, The Linux Foundation. All rights reserved.
- * Not a Contribution.
- *
  * Copyright (C) 2008 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -33,7 +30,6 @@ import android.annotation.SystemService;
 import android.annotation.TestApi;
 import android.annotation.WorkerThread;
 import android.app.ActivityThread;
-import android.app.AppOpsManager;
 import android.app.PendingIntent;
 import android.content.Context;
 import android.content.Intent;
@@ -6464,14 +6460,6 @@ public class TelephonyManager {
     public void setDataEnabled(int subId, boolean enable) {
         try {
             Log.d(TAG, "setDataEnabled: enabled=" + enable);
-            AppOpsManager appOps = mContext.getSystemService(AppOpsManager.class);
-            if (enable) {
-                if (appOps.noteOp(AppOpsManager.OP_DATA_CONNECT_CHANGE)
-                        != AppOpsManager.MODE_ALLOWED) {
-                    Log.w(TAG, "Permission denied by user.");
-                    return;
-                }
-            }
             ITelephony telephony = getITelephony();
             if (telephony != null)
                 telephony.setUserDataEnabled(subId, enable);
-- 
2.17.1

